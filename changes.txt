using Microsoft.AspNetCore.Mvc;

namespace pizzaShop.Controllers
{
    public class HomeController : Controller
    {
        [Route("AccessDenied")]
        public IActionResult AccessDenied()
        {
            return View();
        }
    }
}




/Views/Home/AccessDenied.cshtml



@{
    ViewData["Title"] = "Access Denied";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container text-center mt-5">
    <div class="card shadow-lg p-5">
        <h2 class="text-danger mb-4"><i class="bi bi-exclamation-triangle"></i> Access Denied</h2>
        <p class="lead">You do not have permission to access this page.</p>
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary mt-3">Return to Home</a>
    </div>
</div>

<style>
    .card {
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .card h2 {
        font-size: 2rem;
    }

    .lead {
        font-size: 1.2rem;
    }
</style>




public async Task Invoke(HttpContext context)
{
    var token = context.Request.Cookies["AuthToken"];
    if (!string.IsNullOrEmpty(token))
    {
        context.Request.Headers.Add("Authorization", "Bearer " + token);
    }
    else
    {
        var endpoint = context.GetEndpoint();
        var hasAuthorizeAttribute = endpoint?.Metadata.GetMetadata<Microsoft.AspNetCore.Authorization.AuthorizeAttribute>() != null;

        if (hasAuthorizeAttribute)
        {
            // Redirect to Access Denied Page if JWT token is missing
            context.Response.Redirect("/AccessDenied");
            return;
        }
    }

    await _next(context);
}



protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
{
    var httpContext = httpContextAccessor.HttpContext;
    if (httpContext == null || httpContext.User == null)
    {
        context.Fail();
        httpContext.Response.Redirect("/AccessDenied");
        return;
    }

    var endpoint = httpContext.GetEndpoint();
    var hasAuthorizeAttribute = endpoint?.Metadata.GetMetadata<AuthorizeAttribute>() != null;

    if (!hasAuthorizeAttribute)
    {
        context.Succeed(requirement);
        return;
    }

    var user = httpContext.User;

    if (await permissionRepository.HasPermissionAsync(user, requirement.PermissionField, requirement.PermissionType))
    {
        context.Succeed(requirement);
    }
    else
    {
        context.Fail();
        httpContext.Response.Redirect("/AccessDenied");
    }
}


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<IPermissionRepository, PermissionRepository>();
builder.Services.AddSingleton<IAuthorizationPolicyProvider, PermissionPolicyProvider>();
builder.Services.AddScoped<IAuthorizationHandler, PermissionAuthorizationHandler>();

var app = builder.Build();

// Use JWT Middleware
app.UseMiddleware<JwtMiddleware>();

app.UseAuthentication();
app.UseAuthorization();

// Map routes
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();


======================================================





public async Task Invoke(HttpContext context)
{
    var token = context.Request.Cookies["AuthToken"];
    var endpoint = context.GetEndpoint();
    var hasAuthorizeAttribute = endpoint?.Metadata.GetMetadata<Microsoft.AspNetCore.Authorization.AuthorizeAttribute>() != null;

    if (!string.IsNullOrEmpty(token))
    {
        // Add token to the Authorization header
        context.Request.Headers.Add("Authorization", "Bearer " + token);
    }
    else if (hasAuthorizeAttribute)
    {
        // If JWT token is missing and access is protected, redirect to Login page
        context.Response.Redirect("/Account/Login");
        return;
    }

    await _next(context);
}









protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
{
    var httpContext = httpContextAccessor.HttpContext;
    if (httpContext == null || httpContext.User == null)
    {
        context.Fail();
        return;
    }

    var endpoint = httpContext.GetEndpoint();
    var hasAuthorizeAttribute = endpoint?.Metadata.GetMetadata<AuthorizeAttribute>() != null;

    // If no [Authorize] attribute, skip permission check
    if (!hasAuthorizeAttribute)
    {
        context.Succeed(requirement);
        return;
    }

    var user = httpContext.User;

    // Check if the user has required permission
    if (await permissionRepository.HasPermissionAsync(user, requirement.PermissionField, requirement.PermissionType))
    {
        context.Succeed(requirement);
    }
    else
    {
        context.Fail();

        // Redirect to Access Denied if permission is missing
        httpContext.Response.Redirect("/AccessDenied");
    }
}


/Views/Account/Login.cshtml



@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container text-center mt-5">
    <div class="card shadow-lg p-5">
        <h2 class="text-primary mb-4"><i class="bi bi-person-circle"></i> Please Login</h2>
        <form method="post" asp-action="Login" asp-controller="Account">
            <div class="mb-3">
                <input type="text" name="Username" class="form-control" placeholder="Username" required />
            </div>
            <div class="mb-3">
                <input type="password" name="Password" class="form-control" placeholder="Password" required />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
    </div>
</div>

<style>
    .card {
        background-color: #e9f7f9;
        border-color: #d4e6f1;
    }

    .card h2 {
        font-size: 2rem;
    }
</style>




/Views/Home/AccessDenied.cshtml




@{
    ViewData["Title"] = "Access Denied";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container text-center mt-5">
    <div class="card shadow-lg p-5">
        <h2 class="text-danger mb-4"><i class="bi bi-exclamation-triangle"></i> Access Denied</h2>
        <p class="lead">You do not have permission to access this page.</p>
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary mt-3">Return to Home</a>
    </div>
</div>

<style>
    .card {
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .card h2 {
        font-size: 2rem;
    }
</style>





using Microsoft.AspNetCore.Mvc;

namespace pizzaShop.Controllers
{
    public class HomeController : Controller
    {
        [Route("AccessDenied")]
        public IActionResult AccessDenied()
        {
            return View();
        }
    }
}




using Microsoft.AspNetCore.Mvc;

namespace pizzaShop.Controllers
{
    public class AccountController : Controller
    {
        [HttpGet]
        [Route("Account/Login")]
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        [Route("Account/Login")]
        public IActionResult Login(string username, string password)
        {
            if (username == "admin" && password == "password") // Dummy check
            {
                // Set token in cookie or session (replace with actual logic)
                Response.Cookies.Append("AuthToken", "sample-jwt-token");
                return RedirectToAction("Index", "Home");
            }

            ViewBag.ErrorMessage = "Invalid credentials. Please try again.";
            return View();
        }
    }
}





var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<IPermissionRepository, PermissionRepository>();
builder.Services.AddSingleton<IAuthorizationPolicyProvider, PermissionPolicyProvider>();
builder.Services.AddScoped<IAuthorizationHandler, PermissionAuthorizationHandler>();

var app = builder.Build();

// Use JWT Middleware
app.UseMiddleware<JwtMiddleware>();

app.UseAuthentication();
app.UseAuthorization();

// Map routes
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();



===================================================


Install-Package DinkToPdf



using DinkToPdf;
using DinkToPdf.Contracts;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

// Configure DinkToPdf
builder.Services.AddSingleton(typeof(IConverter), new SynchronizedConverter(new PdfTools()));

var app = builder.Build();

// Middleware
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();





using DinkToPdf;
using DinkToPdf.Contracts;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using System.Text;
using System.Threading.Tasks;

namespace pizzaShop_Services.PdfService
{
    public class OrderPdfService
    {
        private readonly IConverter _converter;
        private readonly ICompositeViewEngine _viewEngine;
        private readonly IServiceProvider _serviceProvider;

        public OrderPdfService(IConverter converter, ICompositeViewEngine viewEngine, IServiceProvider serviceProvider)
        {
            _converter = converter;
            _viewEngine = viewEngine;
            _serviceProvider = serviceProvider;
        }

        // Generate PDF from View
        public async Task<byte[]> GenerateOrderPdfAsync<TModel>(string viewName, TModel model)
        {
            var htmlContent = await RenderViewToStringAsync(viewName, model);
            var pdfDocument = new HtmlToPdfDocument()
            {
                GlobalSettings = {
                    PaperSize = PaperKind.A4,
                    Orientation = Orientation.Portrait,
                    Margins = new MarginSettings { Top = 10, Bottom = 10, Left = 10, Right = 10 },
                },
                Objects = {
                    new ObjectSettings() {
                        HtmlContent = htmlContent,
                        WebSettings = { DefaultEncoding = "utf-8" },
                    },
                }
            };

            return _converter.Convert(pdfDocument);
        }

        // Render View to String
        private async Task<string> RenderViewToStringAsync<TModel>(string viewName, TModel model)
        {
            var actionContext = GetActionContext();
            var viewResult = _viewEngine.FindView(actionContext, viewName, false);

            if (viewResult.View == null)
            {
                throw new ArgumentNullException($"{viewName} does not match any available view.");
            }

            using (var sw = new StringWriter())
            {
                var viewContext = new ViewContext(
                    actionContext,
                    viewResult.View,
                    new ViewDataDictionary<TModel>(
                        new EmptyModelMetadataProvider(),
                        new ModelStateDictionary())
                    {
                        Model = model
                    },
                    new TempDataDictionary(actionContext.HttpContext, new TempDataDictionaryFactory(new SessionStateTempDataProvider())),
                    sw,
                    new HtmlHelperOptions()
                );

                await viewResult.View.RenderAsync(viewContext);
                return sw.ToString();
            }
        }

        // Create ActionContext
        private ActionContext GetActionContext()
        {
            var httpContext = new DefaultHttpContext { RequestServices = _serviceProvider };
            return new ActionContext(httpContext, new RouteData(), new ActionDescriptor());
        }
    }
}


---------------

builder.Services.AddScoped<OrderPdfService>();

--------------

@model pizzaShop_Models.ViewModels.OrderViewModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Order Invoice</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        .order-details {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .order-details th, .order-details td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .order-details th {
            background-color: #f2f2f2;
        }
        .total {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="header">
        <h2>Order Invoice</h2>
        <p><strong>Order ID:</strong> @Model.OrderId</p>
        <p><strong>Customer:</strong> @Model.CustomerName</p>
    </div>

    <table class="order-details">
        <thead>
            <tr>
                <th>Item</th>
                <th>Quantity</th>
                <th>Price (₹)</th>
                <th>Total (₹)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.OrderItems)
            {
                <tr>
                    <td>@item.ItemName</td>
                    <td>@item.Quantity</td>
                    <td>@item.Price</td>
                    <td>@(item.Quantity * item.Price)</td>
                </tr>
            }
            <tr>
                <td colspan="3" class="total">Grand Total</td>
                <td class="total">₹@Model.TotalAmount</td>
            </tr>
        </tbody>
    </table>

    <p><strong>Order Date:</strong> @Model.OrderDate.ToString("dd-MM-yyyy")</p>
</body>
</html>



using Microsoft.AspNetCore.Mvc;
using pizzaShop_Models.ViewModels;
using pizzaShop_Services.PdfService;

namespace pizzaShop.Controllers
{
    public class OrderController : Controller
    {
        private readonly OrderPdfService _orderPdfService;

        public OrderController(OrderPdfService orderPdfService)
        {
            _orderPdfService = orderPdfService;
        }

        [HttpGet]
        public async Task<IActionResult> DownloadOrderPdf(int orderId)
        {
            // Simulate fetching order details from database
            var orderViewModel = GetSampleOrder(orderId);

            var pdfBytes = await _orderPdfService.GenerateOrderPdfAsync("/Views/Order/OrderPdfTemplate.cshtml", orderViewModel);

            return File(pdfBytes, "application/pdf", $"Order_{orderViewModel.OrderId}.pdf");
        }

        // Simulated sample data for order
        private OrderViewModel GetSampleOrder(int orderId)
        {
            return new OrderViewModel
            {
                OrderId = orderId,
                CustomerName = "John Doe",
                OrderDate = DateTime.Now.AddDays(-5),
                TotalAmount = 1299.99m,
                OrderItems = new List<OrderItemViewModel>
                {
                    new OrderItemViewModel { ItemName = "Pizza Margherita", Quantity = 2, Price = 299.99m },
                    new OrderItemViewModel { ItemName = "Garlic Bread", Quantity = 1, Price = 199.99m },
                    new OrderItemViewModel { ItemName = "Soft Drink", Quantity = 3, Price = 99.99m }
                }
            };
        }
    }
}




=========================================


Install-Package Rotativa.AspNetCore




using Rotativa.AspNetCore;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

// Add Rotativa Configuration
var app = builder.Build();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

// Configure Rotativa
RotativaConfiguration.Setup(app.Environment.WebRootPath, "Rotativa");

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();




@model pizzaShop_Models.ViewModels.OrderViewModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Order Invoice</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 20px; }
        .order-details { width: 100%; border-collapse: collapse; margin-top: 20px; }
        .order-details th, .order-details td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        .order-details th { background-color: #f2f2f2; }
        .total { font-weight: bold; }
    </style>
</head>
<body>
    <div class="header">
        <h2>Order Invoice</h2>
        <p><strong>Order ID:</strong> @Model.OrderId</p>
        <p><strong>Customer:</strong> @Model.CustomerName</p>
    </div>

    <table class="order-details">
        <thead>
            <tr>
                <th>Item</th>
                <th>Quantity</th>
                <th>Price (₹)</th>
                <th>Total (₹)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.OrderItems)
            {
                <tr>
                    <td>@item.ItemName</td>
                    <td>@item.Quantity</td>
                    <td>@item.Price</td>
                    <td>@(item.Quantity * item.Price)</td>
                </tr>
            }
            <tr>
                <td colspan="3" class="total">Grand Total</td>
                <td class="total">₹@Model.TotalAmount</td>
            </tr>
        </tbody>
    </table>

    <p><strong>Order Date:</strong> @Model.OrderDate.ToString("dd-MM-yyyy")</p>
</body>
</html>





using Microsoft.AspNetCore.Mvc;
using pizzaShop_Models.ViewModels;
using Rotativa.AspNetCore;

namespace pizzaShop.Controllers
{
    public class OrderController : Controller
    {
        [HttpGet]
        public IActionResult DownloadOrderPdf(int orderId)
        {
            // Simulate fetching order details from the database
            var orderViewModel = GetSampleOrder(orderId);

            return new ViewAsPdf("OrderPdfTemplate", orderViewModel)
            {
                FileName = $"Order_{orderViewModel.OrderId}.pdf",
                PageSize = Rotativa.AspNetCore.Options.Size.A4,
                PageOrientation = Rotativa.AspNetCore.Options.Orientation.Portrait
            };
        }

        // Simulated sample data for order
        private OrderViewModel GetSampleOrder(int orderId)
        {
            return new OrderViewModel
            {
                OrderId = orderId,
                CustomerName = "John Doe",
                OrderDate = DateTime.Now.AddDays(-5),
                TotalAmount = 1299.99m,
                OrderItems = new List<OrderItemViewModel>
                {
                    new OrderItemViewModel { ItemName = "Pizza Margherita", Quantity = 2, Price = 299.99m },
                    new OrderItemViewModel { ItemName = "Garlic Bread", Quantity = 1, Price = 199.99m },
                    new OrderItemViewModel { ItemName = "Soft Drink", Quantity = 3, Price = 99.99m }
                }
            };
        }
    }
}











