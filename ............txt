@model List<pizzaShop_Models.ViewModel.CategoryViewModel>
@{
    var selectedCategoryId = ""; // Initial value
}
<div class="d-lg-none col-12 bg-white d-flex justify-content-between px-3 pt-2">
    <div class="col-sm-3">
        <select id="categoryDropdown" name="category"
            class="form-select form-select-lg custom-border placeholder-text gray-text text-black rounded-1"
            style="padding: 11px !important" aria-label="Large select example" onchange="handleCategoryChange()">
            <option value="disable" disabled selected hidden class="text-black">
                Category
            </option>
            @foreach (var categoryDropDown in Model)
            {
                <option value="@categoryDropDown.CategoryId">@categoryDropDown.Categoryname</option>
            }
        </select>
    </div>
    <input type="hidden" id="selectedCategoryId" name="selectedCategoryId" value="@selectedCategoryId" />
    <div class="d-flex">
        <div class="d-flex gap-sm-1 action-btns me-2 d-none" id="action-btns-dropdown">
            <button type="button" class="border border-black border-opacity-50 bg-transparent p-1 px-2 me-2 btn"
                data-bs-toggle="modal" data-bs-target="#updateCategoryModal">
                <i class="bi bi-pencil text-black fs-4"></i>
            </button>
        </div>

        <!-- Update Category Modal -->
        <div class="modal fade" id="updateCategoryModal" data-bs-backdrop="static" tabindex="-1"
            aria-labelledby="updateCategoryModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h1 class="modal-title fs-5 text-black" id="updateCategoryModalLabel">
                            Update Category
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body d-flex flex-column justify-content-end align-items-end">
                        <input id="updateCategoryId" type="hidden" />
                        <input id="updateCategoryName" name="categoryName" type="text"
                            class="form-control form-control-lg custom-border placeholder-text rounded-1 my-2 mt-3"
                            placeholder="Category Name" />
                        <div class="invalid-feedback roboto-light text-start">Category Name is Required</div>
                        <textarea id="updateCategoryDescription" name="categoryDescription" type="text" rows="2"
                            class="form-control form-control-lg custom-border placeholder-text rounded-1 my-2 mb-4"
                            placeholder="Category Description"></textarea>
                        <div class="invalid-feedback roboto-light text-start">Description for Category is Required</div>
                        <div class="">
                            <button id="updateCategoryBtn" type="submit"
                                class="pizza-bg p-2 px-4 border-0 rounded-1 text-white fw-semibold">
                                Update
                            </button>
                            <button type="button" class="blue-text p-2 rounded-1 bg-transparent fw-semibold px-4"
                                data-bs-dismiss="modal" style="border: 1px solid #2272ac">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var categories = @Html.Raw(Json.Serialize(Model));

    function handleCategoryChange() {
        var selectedId = document.getElementById("categoryDropdown").value;
        document.getElementById("selectedCategoryId").value = selectedId;
        
        var selectedCategory = categories.find(cat => cat.CategoryId == selectedId);
        if (selectedCategory) {
            document.getElementById("updateCategoryId").value = selectedCategory.CategoryId;
            document.getElementById("updateCategoryName").value = selectedCategory.Categoryname;
            document.getElementById("updateCategoryDescription").value = selectedCategory.CategoryDescription;
        }

        document.getElementById("action-btns-dropdown").classList.remove("d-none");
    }
</script>




======================================


@model List<pizzaShop_Models.ViewModel.CategoryViewModel>
@{
    var selectedCategoryId = ""; // Initial value
}
<div class="">
    <div class="list-group-flush bg-transparent">
        @foreach (var category in Model)
        {
            <a class="p-1 py-2 list-group-item list-group-item-action d-flex justify-content-between align-items-center text-black fs-5 rounded-2 category-item"
                id="category-@(category.CategoryId)" data-category-id="@(category.CategoryId)" aria-current="true">
                <div class="d-flex gap-2 align-items-center">
                    <i class="bi bi-grip-vertical fw-semibold"></i>
                    <p class="mb-0">@category.Categoryname</p>
                </div>
                <div class="d-flex gap- d-none action-btns me-2" id="action-btns">
                    <button type="button" class="border-0 bg-transparent p-0 me-2" data-bs-toggle="modal"
                        data-bs-target="#update-@(category.CategoryId)">
                        <i class="bi bi-pencil text-black opacity-75 "></i>
                    </button>
                    <button type="button" class="border-0 bg-transparent p-0 ms-2" data-bs-toggle="modal"
                        data-bs-target="#delete-@(category.CategoryId)">
                        <i class="bi bi-trash text-danger opacity-75 "></i>
                    </button>
                </div>
            </a>
        }
    </div>
</div>

<div id="categoryItemsContainer">
    @Html.Partial("_CategoryItems", new List<pizzaShop_Models.ViewModel.ItemViewModel>())
</div>

<style>
    .category-item.selected {
        background-color: #2272ac;
        color: white;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $('.category-item').on('click', function() {
            $('.category-item').removeClass('selected');
            $(this).addClass('selected');
            
            var categoryId = $(this).data('category-id');
            loadCategoryItems(categoryId);
        });
    });

    function loadCategoryItems(categoryId) {
        $.ajax({
            url: '/Category/GetItemsByCategory',
            type: 'GET',
            data: { categoryId: categoryId },
            success: function(response) {
                $('#categoryItemsContainer').html(response);
            },
            error: function() {
                alert('Failed to load category items.');
            }
        });
    }
</script>





public IActionResult GetItemsByCategory(int categoryId)
{
    var items = _itemService.GetItemsByCategory(categoryId);
    return PartialView("_CategoryItems", items);
}




==================================


builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("CanView", policy => policy.Requirements.Add(new PermissionRequirement("CanView")));
    options.AddPolicy("CanAdd", policy => policy.Requirements.Add(new PermissionRequirement("CanAdd")));
    options.AddPolicy("CanDelete", policy => policy.Requirements.Add(new PermissionRequirement("CanDelete")));
});



using Microsoft.AspNetCore.Authorization;

public class PermissionRequirement : IAuthorizationRequirement
{
    public string PermissionType { get; }

    public PermissionRequirement(string permissionType)
    {
        PermissionType = permissionType;
    }
}





using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using pizzaShop_Services.Interfaces;

public class PermissionAuthorizationHandler : AuthorizationHandler<PermissionRequirement>
{
    private readonly IPermissionService _permissionService;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public PermissionAuthorizationHandler(IPermissionService permissionService, IHttpContextAccessor httpContextAccessor)
    {
        _permissionService = permissionService;
        _httpContextAccessor = httpContextAccessor;
    }

    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        var user = httpContext.User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var controllerName = httpContext.GetRouteData().Values["controller"]?.ToString();

        if (controllerName != null && _permissionService.HasPermission(user, controllerName, requirement.PermissionType))
        {
            context.Succeed(requirement);
        }
        else
        {
            context.Fail();
        }

        return Task.CompletedTask;
    }
}






using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize] // Ensures authentication
public class CategoryController : Controller
{
    [Authorize("CanView")]
    [HttpGet]
    public IActionResult Index()
    {
        return View();
    }

    [Authorize("CanAdd")]
    [HttpPost]
    public IActionResult AddCategory(CategoryViewModel model)
    {
        if (ModelState.IsValid)
        {
            return Json(new { message = "Category added successfully" });
        }
        return BadRequest("Invalid data");
    }

    [Authorize("CanDelete")]
    [HttpDelete]
    public IActionResult DeleteCategory(int categoryId)
    {
        return Json(new { message = "Category deleted successfully" });
    }
}






=================================


using Microsoft.AspNetCore.Authorization;

public class PermissionRequirement : IAuthorizationRequirement
{
    public string PermissionType { get; }

    public PermissionRequirement(string permissionType)
    {
        PermissionType = permissionType;
    }
}




using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using pizzaShop_Services.Interfaces;

public class PermissionAuthorizationHandler : AuthorizationHandler<PermissionRequirement>
{
    private readonly IPermissionService _permissionService;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public PermissionAuthorizationHandler(IPermissionService permissionService, IHttpContextAccessor httpContextAccessor)
    {
        _permissionService = permissionService;
        _httpContextAccessor = httpContextAccessor;
    }

    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        var user = httpContext.User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var controllerName = httpContext.GetRouteData().Values["controller"]?.ToString();

        if (controllerName != null && _permissionService.HasPermission(user, controllerName, requirement.PermissionType))
        {
            context.Succeed(requirement);
        }
        else
        {
            context.Fail();
        }

        return Task.CompletedTask;
    }
}






using System.Linq;
using System.Security.Claims;
using pizzaShop_Models.Models;
using pizzaShop_Repository.Interfaces;

public class PermissionService : IPermissionService
{
    private readonly IUserRepository _userRepository;
    private readonly IPermissionRepository _permissionRepository;

    public PermissionService(IUserRepository userRepository, IPermissionRepository permissionRepository)
    {
        _userRepository = userRepository;
        _permissionRepository = permissionRepository;
    }

    public bool HasPermission(ClaimsPrincipal user, string permissionField, string permissionType)
    {
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var userRole = _userRepository.GetUserRole(userId);
        if (userRole == null) return false;

        var permission = _permissionRepository.GetPermissionsByRole(userRole.RoleId)
            .FirstOrDefault(p => p.Permissionfield.Permissionfieldname == permissionField);

        if (permission == null) return false;

        return permissionType switch
        {
            "CanView" => permission.Canview,
            "CanAdd" => permission.Canadd,
            "CanDelete" => permission.Candelete,
            _ => false
        };
    }
}










using Microsoft.AspNetCore.Authorization;
using pizzaShop_Services.Interfaces;
using pizzaShop_Services.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<IPermissionService, PermissionService>();
builder.Services.AddScoped<IAuthorizationHandler, PermissionAuthorizationHandler>();

builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("CanView", policy => policy.Requirements.Add(new PermissionRequirement("CanView")));
    options.AddPolicy("CanAdd", policy => policy.Requirements.Add(new PermissionRequirement("CanAdd")));
    options.AddPolicy("CanDelete", policy => policy.Requirements.Add(new PermissionRequirement("CanDelete")));
});

var app = builder.Build();
app.UseAuthorization();
app.MapControllers();
app.Run();









using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize] // Ensures only authenticated users can access
public class CategoryController : Controller
{
    [Authorize(Policy = "CanView")]
    [HttpGet]
    public IActionResult Index()
    {
        return View();
    }

    [Authorize(Policy = "CanAdd")]
    [HttpPost]
    public IActionResult AddCategory(CategoryViewModel model)
    {
        if (ModelState.IsValid)
        {
            return Json(new { message = "Category added successfully" });
        }
        return BadRequest("Invalid data");
    }

    [Authorize(Policy = "CanDelete")]
    [HttpDelete]
    public IActionResult DeleteCategory(int categoryId)
    {
        return Json(new { message = "Category deleted successfully" });
    }
}







@inject pizzaShop_Services.Interfaces.IPermissionService _permissionService

@if (_permissionService.HasPermission(User, "Category", "CanAdd"))
{
    <button id="addCategoryBtn" class="btn btn-primary">Add Category</button>
}

@foreach (var category in Model)
{
    <tr>
        <td>@category.Categoryname</td>
        @if (_permissionService.HasPermission(User, "Category", "CanDelete"))
        {
            <td>
                <button class="btn btn-danger delete-category" data-id="@category.CategoryId">Delete</button>
            </td>
        }
    </tr>
}









<!-- Edit Category Modal -->
<div class="modal fade" id="categoryModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h1 class="modal-title fs-5 text-black" id="categoryModalLabel">Edit Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="categoryId" />
                <input id="categoryName" type="text" class="form-control mb-3" placeholder="Category Name" />
                <textarea id="categoryDescription" rows="2" class="form-control mb-3" placeholder="Category Description"></textarea>
                <div class="d-flex justify-content-end gap-2">
                    <button id="saveCategoryBtn" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-danger" data-bs-target="#deleteCategoryModal" data-bs-toggle="modal">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteCategoryModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="deleteCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteCategoryModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this category?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-target="#categoryModal" data-bs-toggle="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteCategoryBtn">Delete</button>
            </div>
        </div>
    </div>
</div>








CREATE TABLE User (
    user_id SERIAL PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    UserName VARCHAR(50) UNIQUE,
    Email VARCHAR(100) UNIQUE,
    Password VARCHAR(255),
    role_id INT REFERENCES Role(role_id),
    ImageUrl VARCHAR(255),
    Country VARCHAR(30),
    State VARCHAR(30),
    City VARCHAR(30),
    ZipCode VARCHAR(10),
    Address VARCHAR(255),
    ContactNumber VARCHAR(15),
    Status BOOLEAN,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id),
    IsDeleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE ResetToken (
    token_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES User(user_id),
    token VARCHAR(255) UNIQUE,
    isReseted BOOLEAN DEFAULT FALSE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ExpiredAt TIMESTAMP
);

CREATE TABLE Role (
    role_id SERIAL PRIMARY KEY,
    RoleName VARCHAR(50) UNIQUE
);

CREATE TABLE PermissionField (
    permissionField_id SERIAL PRIMARY KEY,
    moduleName VARCHAR(50) UNIQUE
);

CREATE TABLE Permission (
    permission_id SERIAL PRIMARY KEY,
    permissionField_id INT REFERENCES PermissionField(permissionField_id),
    role_id INT REFERENCES Role(role_id),
    CanView BOOLEAN DEFAULT FALSE,
    CanAdd BOOLEAN DEFAULT FALSE,
    CanDelete BOOLEAN DEFAULT FALSE,
    CreatedBy INT REFERENCES User(user_id),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedBy INT REFERENCES User(user_id),
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IsDeleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE Category (
    category_id SERIAL PRIMARY KEY,
    CategoryName VARCHAR(50) UNIQUE,
    Description TEXT,
    IsDeleted BOOLEAN DEFAULT FALSE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);

CREATE TABLE Item (
    item_id SERIAL PRIMARY KEY,
    Name VARCHAR(50),
    Description TEXT,
    itemType VARCHAR(50),
    Rate NUMERIC(10,2),
    Quantity INT,
    isAvailable BOOLEAN DEFAULT TRUE,
    category_id INT REFERENCES Category(category_id),
    isDeleted BOOLEAN DEFAULT FALSE,
    Unit_id INT REFERENCES Units(unit_id),
    DefaultTax BOOLEAN DEFAULT FALSE,
    TaxPercentage NUMERIC(5,2),
    ShortCode VARCHAR(20) UNIQUE,
    ImageUrl VARCHAR(255),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);

CREATE TABLE Units (
    unit_id SERIAL PRIMARY KEY,
    name VARCHAR(50),
    shortName VARCHAR(20) UNIQUE
);

CREATE TABLE ModifierGroup (
    modifierGroup_id SERIAL PRIMARY KEY,
    GroupName VARCHAR(50) UNIQUE,
    Description TEXT,
    isDeleted BOOLEAN DEFAULT FALSE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);

CREATE TABLE Modifier (
    modifier_id SERIAL PRIMARY KEY,
    Name VARCHAR(50),
    Rate NUMERIC(10,2),
    Unit INT REFERENCES Units(unit_id),
    Quantity INT,
    Description TEXT,
    isDeleted BOOLEAN DEFAULT FALSE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);

CREATE TABLE ModifierToModifierGroup (
    modifierToGroup_id SERIAL PRIMARY KEY,
    modifierGroup_id INT REFERENCES ModifierGroup(modifierGroup_id),
    modifier_id INT REFERENCES Modifier(modifier_id),
    isDeleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE ItemToModifierGroup (
    itemToGroup_id SERIAL PRIMARY KEY,
    item_id INT REFERENCES Item(item_id),
    modifierGroup_id INT REFERENCES ModifierGroup(modifierGroup_id)
);

CREATE TABLE Section (
    section_id SERIAL PRIMARY KEY,
    Name VARCHAR(50),
    Description TEXT,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);

CREATE TABLE TableLayout (
    table_id SERIAL PRIMARY KEY,
    Name VARCHAR(50),
    section_id INT REFERENCES Section(section_id),
    Capacity INT,
    Status BOOLEAN DEFAULT TRUE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);

CREATE TABLE Tax (
    tax_id SERIAL PRIMARY KEY,
    Name VARCHAR(50) UNIQUE,
    isEnabled BOOLEAN DEFAULT TRUE,
    Default BOOLEAN DEFAULT FALSE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id),
    TaxType VARCHAR(50),
    Amount NUMERIC(10,2)
);

CREATE TABLE FavouriteItem (
    favouriteItem_id SERIAL PRIMARY KEY,
    item_id INT REFERENCES Item(item_id)
);

CREATE TABLE Customer (
    customer_id SERIAL PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    ContactNumber VARCHAR(15) UNIQUE,
    Email VARCHAR(100) UNIQUE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id),
    isDeleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE OrderDetails (
    order_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES Customer(customer_id),
    OrderStatus VARCHAR(50),
    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalAmount NUMERIC(10,2),
    NoOfPerson INT,
    FoodRate INT,
    ServiceRate INT,
    AmbienceRate INT,
    Comment TEXT
);

CREATE TABLE OrderToTable (
    orderToTable_id SERIAL PRIMARY KEY,
    table_id INT REFERENCES TableLayout(table_id),
    order_id INT REFERENCES OrderDetails(order_id)
);

CREATE TABLE OrderToItem (
    orderToItem_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES OrderDetails(order_id),
    item_id INT REFERENCES Item(item_id),
    Instruction TEXT,
    Quantity INT,
    Amount NUMERIC(10,2),
    Status VARCHAR(50)
);

CREATE TABLE OrderItemModifier (
    orderItemModifier_id SERIAL PRIMARY KEY,
    orderToItem_id INT REFERENCES OrderToItem(orderToItem_id),
    modifier_id INT REFERENCES Modifier(modifier_id)
);

CREATE TABLE WaitingToken (
    waitingToken_id SERIAL PRIMARY KEY,
    section_id INT REFERENCES Section(section_id),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    WaitingTime TIME
);

CREATE TABLE Payment (
    payment_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES OrderDetails(order_id),
    paymentMethod VARCHAR(50),
    paymentStatus VARCHAR(50),
    Amount NUMERIC(10,2),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Rating (
    rating_id SERIAL PRIMARY KEY,
    order_Id INT REFERENCES OrderDetails(order_id),
    FoodRate NUMERIC(2,1),
    ServiceRate NUMERIC(2,1),
    AmbienceRate NUMERIC(2,1),
    Comment TEXT,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy INT REFERENCES User(user_id),
    UpdatedBy INT REFERENCES User(user_id)
);





















using Microsoft.AspNetCore.Http;
using System.Linq;
using System.Threading.Tasks;

namespace pizzaShop_Services.Middleware;

public class JwtMiddleware
{
    private readonly RequestDelegate _next;

    public JwtMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        var token = context.Request.Cookies["AuthToken"];
        if (!string.IsNullOrEmpty(token))
        {
            context.Request.Headers.Add("Authorization", "Bearer " + token);
        }
        else
        {
            // Check if an [Authorize] attribute is applied on the route
            var endpoint = context.GetEndpoint();
            var hasAuthorizeAttribute = endpoint?.Metadata.GetMetadata<Microsoft.AspNetCore.Authorization.AuthorizeAttribute>() != null;

            if (hasAuthorizeAttribute)
            {
                context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                await context.Response.WriteAsync("Unauthorized: JWT token is missing.");
                return;
            }
        }

        await _next(context);
    }
}






using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System.Security.Claims;
using System.Threading.Tasks;
using pizzaShop_Models.Repositories.Interfaces;

namespace pizzaShop_Services.Middleware;

public class PermissionAuthorizationHandler : AuthorizationHandler<PermissionRequirement>
{
    private readonly IPermissionRepository _permissionRepository;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public PermissionAuthorizationHandler(IPermissionRepository permissionRepository, IHttpContextAccessor httpContextAccessor)
    {
        _permissionRepository = permissionRepository;
        _httpContextAccessor = httpContextAccessor;
    }

    protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        if (httpContext == null || httpContext.User == null)
        {
            context.Fail();
            return;
        }

        var endpoint = httpContext.GetEndpoint();
        var hasAuthorizeAttribute = endpoint?.Metadata.GetMetadata<AuthorizeAttribute>() != null;

        // If no [Authorize] attribute, just check for JWT authentication
        if (!hasAuthorizeAttribute)
        {
            context.Succeed(requirement);
            return;
        }

        // Otherwise, check role-based permission
        var user = httpContext.User;
        if (await _permissionRepository.HasPermissionAsync(user, requirement.PermissionField, requirement.PermissionType))
        {
            context.Succeed(requirement);
        }
        else
        {
            context.Fail();
        }
    }
}










using Microsoft.AspNetCore.Authorization;
using pizzaShop_Services.Middleware;
using pizzaShop_Models.Repositories.Interfaces;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<IPermissionRepository, PermissionRepository>();
builder.Services.AddScoped<IAuthorizationHandler, PermissionAuthorizationHandler>();

builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("PermissionPolicy", policy =>
        policy.Requirements.Add(new PermissionRequirement("Invalid:Invalid"))); // Placeholder
});

var app = builder.Build();

// Add JwtMiddleware before authentication
app.UseMiddleware<JwtMiddleware>();

app.UseAuthorization();
app.MapControllers();
app.Run();








[Authorize] // Only checks JWT
public IActionResult Index()
{
    return View();
}

[Authorize("ManageCategories:CanView")] // Checks both JWT and permissions
public IActionResult ViewCategory()
{
    return View();
}

[Authorize("ManageCategories:CanAdd")]
[HttpPost]
public IActionResult AddCategory(CategoryViewModel model)
{
    return Json(new { message = "Category added successfully" });
}

[Authorize("ManageCategories:CanDelete")]
[HttpDelete]
public IActionResult DeleteCategory(int categoryId)
{
    return Json(new { message = "Category deleted successfully" });
}


=========================================


$(document).ready(function () {
    // Automatically select the first category when the page loads
    var firstCategory = $("[id^=category-]").first();
    if (firstCategory.length > 0) {
        selectCategory(firstCategory.attr("id")); // Call selectCategory function
    }
});

function selectCategory(id) {
    var selectedElement = $(`#${id}`);

    // Reset all category elements
    $("[id^=category-]").css("background-color", "transparent").removeClass("shadow-sm").find(".action-btns").addClass("d-none");

    // Highlight the selected category
    selectedElement.css("background-color", "#F1F5F2").addClass("shadow-sm").find(".action-btns").addClass("d-none");

    // Remove selection from all and set the selected category
    $("[id^=category-]").removeAttr("data-selected");
    selectedElement.attr("data-selected", "true");

    // Update the hidden input field for selected category ID
    var categoryId = selectedElement.data("category-id");
    $("#selectedCategoryId").val(categoryId);

    // Load items for the selected category
    loadCategoryItems(categoryId, 1);
}

