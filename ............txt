@model List<pizzaShop_Models.ViewModel.CategoryViewModel>
@{
    var selectedCategoryId = ""; // Initial value
}
<div class="d-lg-none col-12 bg-white d-flex justify-content-between px-3 pt-2">
    <div class="col-sm-3">
        <select id="categoryDropdown" name="category"
            class="form-select form-select-lg custom-border placeholder-text gray-text text-black rounded-1"
            style="padding: 11px !important" aria-label="Large select example" onchange="handleCategoryChange()">
            <option value="disable" disabled selected hidden class="text-black">
                Category
            </option>
            @foreach (var categoryDropDown in Model)
            {
                <option value="@categoryDropDown.CategoryId">@categoryDropDown.Categoryname</option>
            }
        </select>
    </div>
    <input type="hidden" id="selectedCategoryId" name="selectedCategoryId" value="@selectedCategoryId" />
    <div class="d-flex">
        <div class="d-flex gap-sm-1 action-btns me-2 d-none" id="action-btns-dropdown">
            <button type="button" class="border border-black border-opacity-50 bg-transparent p-1 px-2 me-2 btn"
                data-bs-toggle="modal" data-bs-target="#updateCategoryModal">
                <i class="bi bi-pencil text-black fs-4"></i>
            </button>
        </div>

        <!-- Update Category Modal -->
        <div class="modal fade" id="updateCategoryModal" data-bs-backdrop="static" tabindex="-1"
            aria-labelledby="updateCategoryModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h1 class="modal-title fs-5 text-black" id="updateCategoryModalLabel">
                            Update Category
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body d-flex flex-column justify-content-end align-items-end">
                        <input id="updateCategoryId" type="hidden" />
                        <input id="updateCategoryName" name="categoryName" type="text"
                            class="form-control form-control-lg custom-border placeholder-text rounded-1 my-2 mt-3"
                            placeholder="Category Name" />
                        <div class="invalid-feedback roboto-light text-start">Category Name is Required</div>
                        <textarea id="updateCategoryDescription" name="categoryDescription" type="text" rows="2"
                            class="form-control form-control-lg custom-border placeholder-text rounded-1 my-2 mb-4"
                            placeholder="Category Description"></textarea>
                        <div class="invalid-feedback roboto-light text-start">Description for Category is Required</div>
                        <div class="">
                            <button id="updateCategoryBtn" type="submit"
                                class="pizza-bg p-2 px-4 border-0 rounded-1 text-white fw-semibold">
                                Update
                            </button>
                            <button type="button" class="blue-text p-2 rounded-1 bg-transparent fw-semibold px-4"
                                data-bs-dismiss="modal" style="border: 1px solid #2272ac">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var categories = @Html.Raw(Json.Serialize(Model));

    function handleCategoryChange() {
        var selectedId = document.getElementById("categoryDropdown").value;
        document.getElementById("selectedCategoryId").value = selectedId;
        
        var selectedCategory = categories.find(cat => cat.CategoryId == selectedId);
        if (selectedCategory) {
            document.getElementById("updateCategoryId").value = selectedCategory.CategoryId;
            document.getElementById("updateCategoryName").value = selectedCategory.Categoryname;
            document.getElementById("updateCategoryDescription").value = selectedCategory.CategoryDescription;
        }

        document.getElementById("action-btns-dropdown").classList.remove("d-none");
    }
</script>




======================================


@model List<pizzaShop_Models.ViewModel.CategoryViewModel>
@{
    var selectedCategoryId = ""; // Initial value
}
<div class="">
    <div class="list-group-flush bg-transparent">
        @foreach (var category in Model)
        {
            <a class="p-1 py-2 list-group-item list-group-item-action d-flex justify-content-between align-items-center text-black fs-5 rounded-2 category-item"
                id="category-@(category.CategoryId)" data-category-id="@(category.CategoryId)" aria-current="true">
                <div class="d-flex gap-2 align-items-center">
                    <i class="bi bi-grip-vertical fw-semibold"></i>
                    <p class="mb-0">@category.Categoryname</p>
                </div>
                <div class="d-flex gap- d-none action-btns me-2" id="action-btns">
                    <button type="button" class="border-0 bg-transparent p-0 me-2" data-bs-toggle="modal"
                        data-bs-target="#update-@(category.CategoryId)">
                        <i class="bi bi-pencil text-black opacity-75 "></i>
                    </button>
                    <button type="button" class="border-0 bg-transparent p-0 ms-2" data-bs-toggle="modal"
                        data-bs-target="#delete-@(category.CategoryId)">
                        <i class="bi bi-trash text-danger opacity-75 "></i>
                    </button>
                </div>
            </a>
        }
    </div>
</div>

<div id="categoryItemsContainer">
    @Html.Partial("_CategoryItems", new List<pizzaShop_Models.ViewModel.ItemViewModel>())
</div>

<style>
    .category-item.selected {
        background-color: #2272ac;
        color: white;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $('.category-item').on('click', function() {
            $('.category-item').removeClass('selected');
            $(this).addClass('selected');
            
            var categoryId = $(this).data('category-id');
            loadCategoryItems(categoryId);
        });
    });

    function loadCategoryItems(categoryId) {
        $.ajax({
            url: '/Category/GetItemsByCategory',
            type: 'GET',
            data: { categoryId: categoryId },
            success: function(response) {
                $('#categoryItemsContainer').html(response);
            },
            error: function() {
                alert('Failed to load category items.');
            }
        });
    }
</script>





public IActionResult GetItemsByCategory(int categoryId)
{
    var items = _itemService.GetItemsByCategory(categoryId);
    return PartialView("_CategoryItems", items);
}




==================================


builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("CanView", policy => policy.Requirements.Add(new PermissionRequirement("CanView")));
    options.AddPolicy("CanAdd", policy => policy.Requirements.Add(new PermissionRequirement("CanAdd")));
    options.AddPolicy("CanDelete", policy => policy.Requirements.Add(new PermissionRequirement("CanDelete")));
});



using Microsoft.AspNetCore.Authorization;

public class PermissionRequirement : IAuthorizationRequirement
{
    public string PermissionType { get; }

    public PermissionRequirement(string permissionType)
    {
        PermissionType = permissionType;
    }
}





using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using pizzaShop_Services.Interfaces;

public class PermissionAuthorizationHandler : AuthorizationHandler<PermissionRequirement>
{
    private readonly IPermissionService _permissionService;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public PermissionAuthorizationHandler(IPermissionService permissionService, IHttpContextAccessor httpContextAccessor)
    {
        _permissionService = permissionService;
        _httpContextAccessor = httpContextAccessor;
    }

    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        var user = httpContext.User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var controllerName = httpContext.GetRouteData().Values["controller"]?.ToString();

        if (controllerName != null && _permissionService.HasPermission(user, controllerName, requirement.PermissionType))
        {
            context.Succeed(requirement);
        }
        else
        {
            context.Fail();
        }

        return Task.CompletedTask;
    }
}






using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize] // Ensures authentication
public class CategoryController : Controller
{
    [Authorize("CanView")]
    [HttpGet]
    public IActionResult Index()
    {
        return View();
    }

    [Authorize("CanAdd")]
    [HttpPost]
    public IActionResult AddCategory(CategoryViewModel model)
    {
        if (ModelState.IsValid)
        {
            return Json(new { message = "Category added successfully" });
        }
        return BadRequest("Invalid data");
    }

    [Authorize("CanDelete")]
    [HttpDelete]
    public IActionResult DeleteCategory(int categoryId)
    {
        return Json(new { message = "Category deleted successfully" });
    }
}






=================================


using Microsoft.AspNetCore.Authorization;

public class PermissionRequirement : IAuthorizationRequirement
{
    public string PermissionType { get; }

    public PermissionRequirement(string permissionType)
    {
        PermissionType = permissionType;
    }
}




using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using pizzaShop_Services.Interfaces;

public class PermissionAuthorizationHandler : AuthorizationHandler<PermissionRequirement>
{
    private readonly IPermissionService _permissionService;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public PermissionAuthorizationHandler(IPermissionService permissionService, IHttpContextAccessor httpContextAccessor)
    {
        _permissionService = permissionService;
        _httpContextAccessor = httpContextAccessor;
    }

    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
    {
        var httpContext = _httpContextAccessor.HttpContext;
        var user = httpContext.User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var controllerName = httpContext.GetRouteData().Values["controller"]?.ToString();

        if (controllerName != null && _permissionService.HasPermission(user, controllerName, requirement.PermissionType))
        {
            context.Succeed(requirement);
        }
        else
        {
            context.Fail();
        }

        return Task.CompletedTask;
    }
}






using System.Linq;
using System.Security.Claims;
using pizzaShop_Models.Models;
using pizzaShop_Repository.Interfaces;

public class PermissionService : IPermissionService
{
    private readonly IUserRepository _userRepository;
    private readonly IPermissionRepository _permissionRepository;

    public PermissionService(IUserRepository userRepository, IPermissionRepository permissionRepository)
    {
        _userRepository = userRepository;
        _permissionRepository = permissionRepository;
    }

    public bool HasPermission(ClaimsPrincipal user, string permissionField, string permissionType)
    {
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        var userRole = _userRepository.GetUserRole(userId);
        if (userRole == null) return false;

        var permission = _permissionRepository.GetPermissionsByRole(userRole.RoleId)
            .FirstOrDefault(p => p.Permissionfield.Permissionfieldname == permissionField);

        if (permission == null) return false;

        return permissionType switch
        {
            "CanView" => permission.Canview,
            "CanAdd" => permission.Canadd,
            "CanDelete" => permission.Candelete,
            _ => false
        };
    }
}










using Microsoft.AspNetCore.Authorization;
using pizzaShop_Services.Interfaces;
using pizzaShop_Services.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<IPermissionService, PermissionService>();
builder.Services.AddScoped<IAuthorizationHandler, PermissionAuthorizationHandler>();

builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("CanView", policy => policy.Requirements.Add(new PermissionRequirement("CanView")));
    options.AddPolicy("CanAdd", policy => policy.Requirements.Add(new PermissionRequirement("CanAdd")));
    options.AddPolicy("CanDelete", policy => policy.Requirements.Add(new PermissionRequirement("CanDelete")));
});

var app = builder.Build();
app.UseAuthorization();
app.MapControllers();
app.Run();









using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize] // Ensures only authenticated users can access
public class CategoryController : Controller
{
    [Authorize(Policy = "CanView")]
    [HttpGet]
    public IActionResult Index()
    {
        return View();
    }

    [Authorize(Policy = "CanAdd")]
    [HttpPost]
    public IActionResult AddCategory(CategoryViewModel model)
    {
        if (ModelState.IsValid)
        {
            return Json(new { message = "Category added successfully" });
        }
        return BadRequest("Invalid data");
    }

    [Authorize(Policy = "CanDelete")]
    [HttpDelete]
    public IActionResult DeleteCategory(int categoryId)
    {
        return Json(new { message = "Category deleted successfully" });
    }
}







@inject pizzaShop_Services.Interfaces.IPermissionService _permissionService

@if (_permissionService.HasPermission(User, "Category", "CanAdd"))
{
    <button id="addCategoryBtn" class="btn btn-primary">Add Category</button>
}

@foreach (var category in Model)
{
    <tr>
        <td>@category.Categoryname</td>
        @if (_permissionService.HasPermission(User, "Category", "CanDelete"))
        {
            <td>
                <button class="btn btn-danger delete-category" data-id="@category.CategoryId">Delete</button>
            </td>
        }
    </tr>
}









<!-- Edit Category Modal -->
<div class="modal fade" id="categoryModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h1 class="modal-title fs-5 text-black" id="categoryModalLabel">Edit Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="categoryId" />
                <input id="categoryName" type="text" class="form-control mb-3" placeholder="Category Name" />
                <textarea id="categoryDescription" rows="2" class="form-control mb-3" placeholder="Category Description"></textarea>
                <div class="d-flex justify-content-end gap-2">
                    <button id="saveCategoryBtn" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-danger" data-bs-target="#deleteCategoryModal" data-bs-toggle="modal">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteCategoryModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="deleteCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteCategoryModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this category?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-target="#categoryModal" data-bs-toggle="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteCategoryBtn">Delete</button>
            </div>
        </div>
    </div>
</div>



