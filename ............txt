$(document).ready(function () {
    let currentPage = 1;
    let pageSize = $("#pageSizeDropDown").val();

    // Load items when page size is changed
    $("#pageSizeDropDown").change(function () {
        pageSize = $(this).val();
        loadItems(1, pageSize); // Reload with new page size from first page
    });

    // Previous Page Button Click
    $("#previousItemPage").click(function () {
        if (currentPage > 1) {
            loadItems(currentPage - 1, pageSize);
        }
    });

    // Next Page Button Click
    $("#nextItemPage").click(function () {
        loadItems(currentPage + 1, pageSize);
    });

    // Function to Fetch Paginated Items
    function loadItems(page, pageSize) {
        $.ajax({
            url: "/Menu/GetItems",
            method: "GET",
            data: { page: page, pageSize: pageSize },
            success: function (response) {
                $("#itemContainer").html(response);
            },
            error: function () {
                alert("Failed to load items.");
            }
        });
    }

    // Function to Update Pagination UI
    window.updatePagination = function (page, pageSize, totalItems) {
        currentPage = page;
        let totalPages = Math.ceil(totalItems / pageSize);
        let startItem = (page - 1) * pageSize + 1;
        let endItem = Math.min(page * pageSize, totalItems);

        $("#paginationInfo").text(`Showing ${startItem}-${endItem} of ${totalItems}`);

        // Enable/Disable buttons based on the page number
        $("#previousItemPage").prop("disabled", page <= 1);
        $("#nextItemPage").prop("disabled", page >= totalPages);
    };
});








@model pizzaShop_Models.ViewModel.PaginatedResponseViewModel<Item>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Rate</th>
            <th scope="col">Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Rate</td>
                <td>@item.Quantity</td>
            </tr>
        }
    </tbody>
</table>

<script>
    updatePagination(@Model.CurrentPage, @Model.PageSize, @Model.TotalItems);
</script>


===============================


$(document).ready(function () {
    // Select the header checkbox and row checkboxes
    var headerCheckbox = $("#allItemCheck");
    var rowCheckboxes = $(".check-item");

    // When header checkbox is checked/unchecked
    headerCheckbox.change(function () {
        var isChecked = $(this).prop("checked");
        rowCheckboxes.prop("checked", isChecked);
    });

    // When any row checkbox is checked/unchecked
    rowCheckboxes.change(function () {
        if ($(".check-item:checked").length === $(".check-item").length) {
            headerCheckbox.prop("checked", true);
        } else {
            headerCheckbox.prop("checked", false);
        }
    });
});


===========================


<th scope="col" width="3%">
    <input class="form-check-input custom-border" type="checkbox" id="allItemCheck" />
</th>

<th scope="row">
    <input class="form-check-input custom-border check-item" type="checkbox" data-id="@item.ItemId" />
</th>




<button type="button" id="deleteManyItemsBtn" disabled
    class="bg-transparent p-0 px-2 rounded-1 blue-text fw-semibold"
    style="border: 1px solid #2272ac"
    data-bs-toggle="modal" data-bs-target="#deleteSelectedItemsModal">
    <i class="bi bi-trash text-blue fs-5 text-opacity-75"></i>
</button>





$(document).ready(function () {
    let selectedItems = [];

    // When any row checkbox is clicked
    $(document).on("change", ".check-item", function () {
        let itemId = $(this).data("id");

        if ($(this).prop("checked")) {
            selectedItems.push(itemId);
        } else {
            selectedItems = selectedItems.filter(id => id !== itemId);
        }

        toggleDeleteManyButton();
    });

    // When header checkbox is clicked
    $("#allItemCheck").change(function () {
        let isChecked = $(this).prop("checked");
        $(".check-item").prop("checked", isChecked).trigger("change");
    });

    // Enable/disable "Delete Many Items" button
    function toggleDeleteManyButton() {
        $("#deleteManyItemsBtn").prop("disabled", selectedItems.length === 0);
    }

    // Delete multiple items when clicking the button
    $("#deleteManyItemsBtn").click(function () {
        if (selectedItems.length === 0) return;

        $.ajax({
            url: "/Menu/DeleteManyItems",
            method: "POST",
            data: { itemIds: selectedItems },
            success: function (response) {
                alert("Selected items deleted successfully!");
                location.reload(); // Refresh the list
            },
            error: function (xhr, status, error) {
                console.error("Error:", error);
            }
        });
    });
});




[HttpPost]
public IActionResult DeleteManyItems([FromBody] List<int> itemIds)
{
    if (itemIds == null || !itemIds.Any())
    {
        return BadRequest(new { message = "No items selected for deletion." });
    }

    var itemsToDelete = _context.Items.Where(i => itemIds.Contains(i.ItemId)).ToList();
    
    if (!itemsToDelete.Any())
    {
        return NotFound(new { message = "No matching items found." });
    }

    _context.Items.RemoveRange(itemsToDelete);
    _context.SaveChanges();

    return Ok(new { message = "Items deleted successfully." });
}


===========================


function addItem() {
    console.log("Clicked add");

    var formData = new FormData();
    formData.set("CategoryId", $("#addItemCategoryDropdown").val());
    formData.set("Name", $("#itemName").val());
    formData.set("ItemType", $("#itemType").val());
    formData.set("Rate", $("#rate").val());
    formData.set("Quantity", $("#quantity").val());
    formData.set("Unit", $("#unitDropDown").val());
    formData.set("IsAvailable", $("#isAvailable").prop("checked"));
    formData.set("IsDefaultTax", $("#isDefaultTax").prop("checked"));
    formData.set("TaxPercentage", $("#taxPercentage").val());
    formData.set("ShortCode", $("#shortCode").val());
    formData.set("Description", $("#description").val());
    formData.set("Imageurl", $("#imageUrl").val());

    var imageInput = $("#imageInput")[0];
    if (imageInput.files.length > 0) {
        formData.set("ProfileImage", imageInput.files[0]);
    }

    $.ajax({
        url: "/Menu/AddItem",
        method: "POST",
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            if (response.success) {
                // ✅ Close the modal
                $("#addItemModal").modal("hide");

                // ✅ Show success toast notification
                showToast(response.message, "success", "");

                // ✅ Load items for the selected category without full page reload
                var categoryId = formData.get("CategoryId");
                loadCategoryItems(categoryId, 1);
            }
        },
        error: function (xhr) {
            console.error("Error:", xhr.responseText);
            showToast("Error adding item. Please try again.", "error", "");
        }
    });
}




====================================


<!-- ✅ Add Modifier Group Modal -->
<div class="modal fade text-black" id="addModifierGroupModal" data-bs-backdrop="static" tabindex="-1"
    aria-labelledby="addModifierGroupLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title gray-text fw-bold fs-5 px-3">Add Modifier Group</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column">
                <input id="modifierGroupName" type="text" class="form-control form-control-lg custom-border rounded-1 my-2"
                    placeholder="Modifier Group Name" />
                <textarea id="modifierGroupDescription" rows="2"
                    class="form-control form-control-lg custom-border rounded-1 my-2"
                    placeholder="Description"></textarea>

                <!-- ✅ Open Select Modifiers Modal -->
                <button data-bs-toggle="modal" data-bs-target="#selectModifiersModal"
                    class="d-flex align-items-center gap-2 bg-transparent border-0 blue-text my-3">
                    <i class="bi bi-plus-lg icons-link blue-text fw-bold fs-5"></i>
                    <p class="mb-0">Add Existing Modifiers</p>
                </button>

                <!-- ✅ Selected Modifiers List -->
                <div id="selectedModifiersContainer" class="mt-2"></div>

                <div class="d-flex justify-content-end gap-2">
                    <button type="button" onclick="saveModifierGroup()"
                        class="pizza-bg p-2 px-4 border-0 rounded-1 text-white fw-semibold">
                        Save
                    </button>
                    <button type="button" class="blue-text p-2 px-3 rounded-1 bg-transparent fw-semibold"
                        data-bs-dismiss="modal" style="border: 1px solid #2272ac">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ✅ Select Modifiers Modal -->
<div class="modal fade" id="selectModifiersModal" aria-hidden="true" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Modifiers</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul id="modifierList" class="list-group">
                    <!-- Modifiers will be loaded here dynamically -->
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="addSelectedModifiers()"
                    class="btn btn-primary" data-bs-dismiss="modal">
                    Add Selected Modifiers
                </button>
            </div>
        </div>
    </div>
</div>








let selectedModifiers = [];

$(document).ready(function () {
    // ✅ Load modifiers when opening the modal
    $("#selectModifiersModal").on("show.bs.modal", function () {
        $.ajax({
            url: "/Modifier/GetModifiers",
            method: "GET",
            success: function (response) {
                $("#modifierList").html("");
                response.forEach(modifier => {
                    $("#modifierList").append(`
                        <li class="list-group-item">
                            <input type="checkbox" class="modifier-checkbox" value="${modifier.modifierId}"> 
                            ${modifier.name}
                        </li>
                    `);
                });
            }
        });
    });
});

// ✅ Add selected modifiers to the first modal
function addSelectedModifiers() {
    selectedModifiers = $(".modifier-checkbox:checked").map(function () {
        return {
            id: $(this).val(),
            name: $(this).parent().text().trim()
        };
    }).get();

    // Display selected modifiers in the first modal
    $("#selectedModifiersContainer").html(
        selectedModifiers.map(m => `<span class="badge bg-primary me-2">${m.name}</span>`).join("")
    );
}

// ✅ Save Modifier Group and Associated Modifiers
function saveModifierGroup() {
    let formData = {
        Groupname: $("#modifierGroupName").val().trim(),
        Description: $("#modifierGroupDescription").val().trim(),
        ModifierIds: selectedModifiers.map(m => m.id)
    };

    if (!formData.Groupname) {
        alert("Modifier group name is required.");
        return;
    }

    $.ajax({
        url: "/Modifier/AddModifierGroup",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify(formData),
        success: function (response) {
            alert("Modifier group added successfully!");
            location.reload();
        },
        error: function (xhr) {
            console.error("Error:", xhr.responseText);
            alert("Failed to add modifier group.");
        }
    });
}










[HttpGet]
public IActionResult GetModifiers()
{
    var modifiers = _context.Modifiers
        .Where(m => m.Isdeleted == false)
        .Select(m => new { m.ModifierId, m.Name })
        .ToList();

    return Json(modifiers);
}

[HttpPost]
public IActionResult AddModifierGroup([FromBody] ModifierGroupViewModel model)
{
    if (string.IsNullOrEmpty(model.Groupname))
        return BadRequest("Modifier group name is required.");

    var modifierGroup = new Modifiergroup
    {
        Groupname = model.Groupname,
        Description = model.Description,
        Createdat = DateTime.UtcNow
    };

    _context.Modifiergroups.Add(modifierGroup);
    _context.SaveChanges();

    if (model.ModifierIds != null && model.ModifierIds.Any())
    {
        var modifierMappings = model.ModifierIds.Select(modifierId => new Modifiertomodifiergroup
        {
            ModifiergroupId = modifierGroup.ModifiergroupId,
            ModifierId = modifierId
        }).ToList();

        _context.Modifiertomodifiergroups.AddRange(modifierMappings);
        _context.SaveChanges();
    }

    return Ok(new { message = "Modifier group added successfully!" });
}








public class ModifierGroupViewModel
{
    public string Groupname { get; set; }
    public string? Description { get; set; }
    public List<int>? ModifierIds { get; set; }
}





------------------------------


<div id="selectedModifiersContainer" class="mt-2 d-flex flex-wrap gap-2"></div>



let selectedModifiers = [];

$(document).ready(function () {
    // ✅ Load modifiers dynamically when opening the modal
    $("#selectModifiersModal").on("show.bs.modal", function () {
        $.ajax({
            url: "/Modifier/GetModifiers",
            method: "GET",
            success: function (response) {
                $("#modifierList").html("");
                response.forEach(modifier => {
                    $("#modifierList").append(`
                        <li class="list-group-item">
                            <input type="checkbox" class="modifier-checkbox" value="${modifier.modifierId}"> 
                            ${modifier.name}
                        </li>
                    `);
                });
            }
        });
    });
});

// ✅ Add selected modifiers to the first modal
function addSelectedModifiers() {
    selectedModifiers = $(".modifier-checkbox:checked").map(function () {
        return {
            id: $(this).val(),
            name: $(this).parent().text().trim()
        };
    }).get();

    displaySelectedModifiers();
}

// ✅ Display selected modifiers with remove (×) button
function displaySelectedModifiers() {
    $("#selectedModifiersContainer").html(
        selectedModifiers.map(m => `
            <span class="badge bg-primary p-2 d-flex align-items-center">
                ${m.name}
                <button type="button" class="btn-close ms-2 remove-modifier" data-id="${m.id}"></button>
            </span>
        `).join("")
    );

    // ✅ Attach remove event
    $(".remove-modifier").click(function () {
        let modifierId = $(this).data("id");
        selectedModifiers = selectedModifiers.filter(m => m.id != modifierId);
        displaySelectedModifiers();
    });
}



=====================================


let selectedModifierGroups = [];

$(document).ready(function () {
    // ✅ Load Modifier Groups when modal opens
    $("#selectModifierGroupsModal").on("show.bs.modal", function () {
        $.ajax({
            url: "/Modifier/GetModifierGroups",
            method: "GET",
            success: function (response) {
                $("#modifierGroupList").html("");
                response.forEach(group => {
                    $("#modifierGroupList").append(`
                        <li class="list-group-item">
                            <input type="checkbox" class="modifier-group-checkbox" value="${group.ModifiergroupId}">
                            ${group.Groupname}
                        </li>
                    `);
                });
            }
        });
    });
});

// ✅ Add selected modifier groups to first modal
function addSelectedModifierGroups() {
    selectedModifierGroups = $(".modifier-group-checkbox:checked").map(function () {
        return {
            id: $(this).val(),
            name: $(this).parent().text().trim()
        };
    }).get();

    displaySelectedModifierGroups();
}

// ✅ Display selected modifier groups
function displaySelectedModifierGroups() {
    $("#selectedModifierGroupsContainer").html(
        selectedModifierGroups.map(m => `
            <span class="badge bg-primary p-2 d-flex align-items-center">
                ${m.name}
                <button type="button" class="btn-close ms-2 remove-modifier-group" data-id="${m.id}"></button>
            </span>
        `).join("")
    );

    // ✅ Remove modifier group when clicking cross
    $(".remove-modifier-group").click(function () {
        let groupId = $(this).data("id");
        selectedModifierGroups = selectedModifierGroups.filter(m => m.id != groupId);
        displaySelectedModifierGroups();
    });
}

// ✅ Save Item with Selected Modifier Groups
function addItem() {
    let formData = {
        Name: $("#itemName").val().trim(),
        Description: $("#description").val().trim(),
        ModifierGroupIds: selectedModifierGroups.map(m => m.id)
    };

    if (!formData.Name) {
        alert("Item name is required.");
        return;
    }

    $.ajax({
        url: "/Menu/AddItem",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify(formData),
        success: function (response) {
            alert("Item added successfully!");
            location.reload();
        },
        error: function (xhr) {
            console.error("Error:", xhr.responseText);
            alert("Failed to add item.");
        }
    });
}





[HttpGet]
public IActionResult GetModifierGroups()
{
    var modifierGroups = _context.Modifiergroups
        .Where(m => m.Isdeleted == false)
        .Select(m => new { m.ModifiergroupId, m.Groupname })
        .ToList();

    return Json(modifierGroups);
}

[HttpPost]
public IActionResult AddItem([FromBody] ItemViewModel model)
{
    if (string.IsNullOrEmpty(model.Name))
        return BadRequest("Item name is required.");

    // ✅ Create and save item
    var item = new Item
    {
        Name = model.Name,
        Description = model.Description,
        Createdat = DateTime.UtcNow
    };

    _context.Items.Add(item);
    _context.SaveChanges();

    // ✅ Associate selected Modifier Groups with Item
    if (model.ModifierGroupIds != null && model.ModifierGroupIds.Any())
    {
        var itemModifierGroups = model.ModifierGroupIds.Select(groupId => new Itemtomodifiergroup
        {
            ItemId = item.ItemId,
            ModifiergroupId = groupId
        }).ToList();

        _context.Itemtomodifiergroups.AddRange(itemModifierGroups);
        _context.SaveChanges();
    }

    return Ok(new { message = "Item added successfully!" });
}






public class ItemViewModel
{
    public string Name { get; set; }
    public string? Description { get; set; }
    public List<int>? ModifierGroupIds { get; set; }
}
